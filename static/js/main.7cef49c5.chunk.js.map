{"version":3,"sources":["components/images/quiz.png","components/images/loader.gif","components/result.jsx","components/questions.jsx","components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Result","props","react_default","a","createElement","className","score","type","onClick","restart","Questions","state","checked","index","useranswer","checkbox","i","answer","console","log","array","_this","setState","nextQuestion","data","correct_answer","datafromchild","_this2","this","newarray","concat","Object","toConsumableArray","incorrect_answers","question","map","option","Fragment","id","value","onChange","style","display","htmlFor","React","Component","Main","start","count","startgame","componentDidMount","fetch","then","res","json","results","src","js","alt","questions_Questions","App","main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cef49c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quiz.b5250645.png\";","module.exports = __webpack_public_path__ + \"static/media/loader.96a335de.gif\";","import React from 'react'\n\nexport default function Result(props) {\n    return (\n        <div className=\"resultbox\">\n        <p className=\"question\"><strong>RESULT</strong></p>\n        <div className=\"mcq\">\n            <h2>You got {props.score}/10 </h2>\n        \n        </div>\n\n        <button type=\"button\" onClick={props.restart} className=\"btn btn-warning m-2\">NEXT</button><br/>\n        </div>\n      )\n}\n","import React from 'react';\nimport \"./questions.css\";\nimport Result from \"./result\";\nimport loader from \"./images/loader.gif\"\n\nexport default class Questions extends React.Component{\n  state={\n    checked:[false,false,false,false],\n    index:0,\n    score:0,\n    useranswer:\"\"\n  }\n  checkbox=(i,answer)=>{\n    console.log(i)\n    let array=this.state.checked;\n    array[i]=!this.state.checked[i];\n    this.setState({\n      checked:array,\n      useranswer:answer\n    })\n  }\n  nextQuestion=()=>{\n    if(this.state.useranswer===this.props.data[this.state.index].correct_answer){\n     this.setState({\n       score:this.state.score+1\n     })\n    }\n       this.setState({\n      index:this.state.index+1,\n      checked:[false,false,false,false]\n    })\n   this.props.datafromchild(this.state.index);\n  }\n  restart=()=>{\n   this.props.restart();\n  }\n  render(){\n    let newarray=[];\n    if(this.state.index<10){\n       newarray=[...this.props.data[this.state.index].incorrect_answers,this.props.data[this.state.index].correct_answer];\n  /* newarray.sort(()=>(Math.round(Math.random())-0.5))  */\n    }\n  return (<div>\n  \n    {this.state.index<10?( <div className=\"questionbox\">\n                    <p className=\"question\"><strong>Question:</strong>{this.props.data[this.state.index].question}</p>\n                    <div className=\"mcq\">\n                      {newarray.map((option,i)=>{\n                        return(\n                          <>\n                      <input type=\"checkbox\" \n                      id={i} \n                      value={option}\n                      checked={this.state.checked[i]} \n                      onChange={()=>this.checkbox(i,option)}\n                      style={{display:\"none\"}}\n                      />\n                        <label className=\"option\" htmlFor={i}><strong className=\"a\">{i+1}</strong><span>{option}</span> \n                      </label>\n                      </>\n                        )\n                      })}\n                  \n                    </div>\n\n                    <button type=\"button\" onClick={this.nextQuestion} className=\"btn btn-warning m-2\">NEXT</button><br/>\n                    </div> ):(<Result score={this.state.score} restart={this.restart}/>)}\n                    </div>)\n}\n}","import React from 'react';\nimport js from \"./images/quiz.png\";\nimport \"./main.css\"\nimport Questions from './questions';\n\n\nexport default class Main extends React.Component {\n        state={\n            data:[],\n            start:false,\n            count:1\n        }\n        componentDidMount(){\n            fetch(`https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple`)\n            .then(res=>res.json()).then(data=>{\n               this.setState({\n                   data:data.results\n               })\n            })\n        }\n        startgame=()=>{\n            this.setState({\n                start:true\n            })\n        }\n        restart=()=>{\n           \n            this.setState({\n                data:[],\n                start:false\n            }) \n            this.componentDidMount();\n        }\n        datafromchild=(index)=>{\n            console.log(index)\n            this.setState({\n                count:index+2\n            })\n        }\n    render(){\n        console.log(this.state.data)\n        return (\n        <section className=\"mainbox\">\n            <div className=\"leftbox\">\n                <h1 className=\"questionCount\">{this.state.count<11? this.state.count+\"/10\":\"RESULT\"}</h1>\n                <div className=\"image\">\n                    <img src={js} alt=\"imagename\" />\n                </div>\n            </div>\n            <div className=\"rightbox\">\n                {this.state.start?(<Questions datafromchild={this.datafromchild} restart={this.restart} data={this.state.data}/> ):(<button type=\"button\" onClick={this.startgame} className=\"btn start btn-warning m-2\">START</button>)}\n           \n            </div>\n        </section>\n    )\n}\n\n    }\n    ","import React from 'react';\nimport './App.css';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}